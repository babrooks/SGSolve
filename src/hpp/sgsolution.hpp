#ifndef _SGSOLUTION_HPP
#define _SGSOLUTION_HPP

#include "sggame.hpp"
#include "sgiteration.hpp"
#include <boost/archive/text_iarchive.hpp>
#include <boost/archive/text_oarchive.hpp>
#include <boost/serialization/utility.hpp>

//! Records the progress of SGSolver::solve().
/*! This class contains a copy of the game used by SGSolver, a list of
    iterations and a list of extreme tuples generated by
    SGSolver::solve(). 
    
    \ingroup src
*/
class SGSolution
{
private:
  SGGame game; /*!< The game that was solved. */
  list<SGIteration> iterations; /*!< A list of SGIteration objects
                                   tracking the progress of
                                   SGSolver::solve(). */
  list<SGTuple> extremeTuples; /*!< The trajectory of the pivot tuple
                                  generated by SGSolver::solve(). */

public:
  //! Default constructor
  SGSolution() {}
  //! Initializes an SGSolution object with a copy of the SGGame _game.
  SGSolution(const SGGame& _game):
    game(_game)
  {}

  //! Get method for the game
  const SGGame & getGame() const { return game; }
  //! Get method for the iterations
  const list<SGIteration> & getIterations() const { return iterations; }
  //! Get method for the extremeTuples
  const list<SGTuple> & getExtremeTuples() const { return extremeTuples; }
  
  //! Resets the SGSolution object by clearing the iterations and
  //! extremeTuples lists.
  void clear() {iterations.clear(); extremeTuples.clear();}
  //! Adds a new iteration to the back of SGSolution::iterations
  void push_back(const SGIteration & iteration)
  { iterations.push_back(iteration); }
  //! Adds a new tuple to the back of SGSolution::extremeTuples
  void push_back(const SGTuple & tuple)
  { extremeTuples.push_back(tuple); }
  //! Pops the last tuple off of SGSolution::extremeTuples
  void pop_back()
  { extremeTuples.pop_back(); }

  //! Serializes the SGSolution object using boost
  template<class Archive>
  void serialize(Archive &ar, const unsigned int version)
  {
    ar & game & iterations & extremeTuples;
  }

  //! Static method for saving an SGSolution object to the file filename.
  static void save(const SGSolution & soln, const char* filename)
  {
    std::ofstream ofs(filename,std::fstream::out);

    if (ofs.good())
      {
	boost::archive::text_oarchive oa(ofs);
	oa << soln;
      }
    else
      throw(SGException(SGException::FAILED_OPEN));
  }

  //! Static method for loading an SGSolution object from the file filename.
  static void load(SGSolution & soln, const char* filename)
  {
    std::ifstream ifs(filename,std::fstream::in);
    if (ifs.good() && ifs.is_open())
      {
	boost::archive::text_iarchive ia(ifs);
	ia >> soln;
      }
    else
      throw(SGException(SGException::FAILED_OPEN));
  }

  friend class boost::serialization::access;
}; // SGSolution

#endif
